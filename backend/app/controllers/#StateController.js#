const dbClient = require('../utils/db');
const { ObjectId } = require('mongodb');
const Tools = require('../helpers/tools')

class StateController {
    /**
     *Creates and stores a new state object
     */
    static async newState (req, res) {
	const { name, countryId } = req.body;

	if (!name || !countryId) {
	    return res.status(400).json({ error: "Incomplete parameters" })
	}

	let country;

	try {
	    country = await dbClient.countries.findOne({ _id: ObjectId(countryId) });
	} catch (err) {
	    return res.status(500).json({ error: err.message })
	}

	if (!country) {
	    return res.status(404).json({ error: "Country not found" })
	}

	let state;
	try {
	    state = await dbClient.states.insertOne(
		{name, countryId}
	    )
	} catch (err) {
	    return res.status(500).json({ error: err.message })
	}

	state = Tools.prepJSON(state);
	return res.json(state);
    }

    /**
     *Retrieves paginated list of all states
     */
    static async getStates (req, res) {
	const { stateId = 0, page=0 } = req.query;

	let query;
	if (stateId !== 0) {
	    query = { _id: ObjectId(stateId) }
	} else {
	    query = {}
	}

	const statePage = dbClient.states.aggregate([
	    { $match: query},
	    { $sort: { createdAt: -1 } },
	    { $skip: parseInt(page, 10) * 10 },
	    { $limit: 10 },
	]);

	const stateData = await statePage.toArray()

	const filteredData = pageData.map((current) => Tools.prepJSON(current));

	return res.json(filteredData)
    }

    /**
     *Retrieves specified state by id
     */
    static async getState (req, res) {
	const { stateId } = req.params;

	let state
	try {
	    state = await dbClient.states.findOne({ _id: ObjectId(stateId) })
	} catch (e) {
	    return res.status(500).json({ error: err.message });
	}

	if (!state) {
	    return res.status(404).json({ error: "State not Found" });
	}

	return res.json(state);
    }

    /**
     *Updates state data
     */
    static async updateState (req, res) {
	const { stateId } = req.params;
	const updateObj = req.body;
	const allowedFields = ['name', 'countryId'];

	console.log(Tools.objPropsInList(updateObj, allowedFields));
	if (!Tools.objPropsInList(updateObj, allowedFields)) {
	    return res.status(404).json({ error: 'Illegal field value supplied' });
	}

	if (updateObj.countryId) {
	    let country;

            try {
		country = await dbClient.countries.findOne(
		    { _id: ObjectId(updateObj.countryId) }
		);
            } catch (err) {
		return res.status(500).json({ error: err.message })
            }

            if (!country) {
		return res.status(404).json({ error: "Country not found" })
            }
	}

	let state
	try {
	}
    }
}
